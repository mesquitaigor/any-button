{"version":3,"sources":["../src/index.ts","../src/any-icons.type.ts","../src/models/AnyIcon.ts","../src/models/IconModel.ts","../src/models/AnyIconsManager.ts"],"sourcesContent":["import { IconSizes } from './any-icons.type';\nimport AnyIcon from './models/AnyIcon';\nimport AnyIconsManager from './models/AnyIconsManager';\nimport IconModel from './models/IconModel';\n\nasync function loadCssFile(url: string): Promise<string | void> {\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(\"Falha ao carregar o arquivo CSS\");\n    }\n\n    const cssText = await response.text();\n    console.log(cssText);\n\n    return cssText;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nloadCssFile('./style.css').then(cssContent => {\n  console.log(cssContent)\n});\n\nconst createManager = <Names>(): AnyIconsManager<Names> => {\n  const instance = AnyIconsManager.build<Names>();\n  AnyIcon.defineManager<Names>(instance)\n  return instance\n}\n\ncustomElements.define(AnyIcon.elementName, AnyIcon);\nexport {AnyIconsManager, AnyIcon, createManager, IconModel, IconSizes}\n\n","enum ImgLoadingType{\n  LAZY = 'lazy',\n  EAGER = 'eager'\n}\ninterface IconRecord<Names>{\n  name: Names[keyof Names],\n  src: string\n}\nenum IconSizes{\n  NANO,\n  MICRO,\n  TINY,\n  SMALL,\n  MEDIUM,\n  LARGE,\n  HUGE,\n  EXTRA_HUGE,\n  GIANT,\n}\ninterface SizeData{\n  size: IconSizes, value: number | string\n}\nconst SizeNames: Record<IconSizes, string> = {\n  [IconSizes.NANO]: \"nano\",\n  [IconSizes.MICRO]: \"micro\",\n  [IconSizes.TINY]: \"tiny\",\n  [IconSizes.SMALL]: \"small\",\n  [IconSizes.MEDIUM]: \"medium\",\n  [IconSizes.LARGE]: \"large\",\n  [IconSizes.HUGE]: \"huge\",\n  [IconSizes.EXTRA_HUGE]: \"extra-huge\",\n  [IconSizes.GIANT]: \"giant\",\n};\nexport { ImgLoadingType, IconRecord, IconSizes, SizeNames, SizeData };","import { AnyIconsManager } from '..';\nimport { IconSizes, ImgLoadingType, SizeNames } from '../any-icons.type';\n\nexport default class AnyIcon<Names> extends HTMLElement {\n  private image?: HTMLImageElement;\n  private shadow?: ShadowRoot;\n  private static __manager__?: AnyIconsManager<Record<string, unknown>>;\n  private static __manager_define_events__: (() => void)[] = [];\n  private static readonly attributeName = 'icon-name';\n  private static readonly imgIdPrefix = 'any-icon-img-element-';\n  public static readonly elementName = 'any-icon';\n  private randomId?: number\n  private managerDefineEventCallback = (): void => {\n    if(!this.image || (this.image && !this.image.getAttribute('src'))){\n      const image = this.createImage();\n      if(image){\n        this.image = image;\n      }\n      this.appendImage();\n      this.connectedCallback()\n    }\n  }\n  public constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n    const image = this.createImage();\n    if(image){\n      this.image = image;\n    }\n    this.appendImage();\n    this.appendStyle();\n    AnyIcon.__manager_define_events__?.push(this.managerDefineEventCallback);\n  }\n\n  public disconnectedCallback(): void{\n    const index = AnyIcon.__manager_define_events__?.indexOf(this.managerDefineEventCallback);\n    if (index > -1) {\n      AnyIcon.__manager_define_events__?.splice(index, 1);\n    }\n  }\n\n  public static get observedAttributes(): string[] {\n    return [this.attributeName];\n  }\n\n  private createImage(): HTMLImageElement | void{\n    const iconName: string | null = this.getAttribute(AnyIcon.attributeName)\n    if(iconName){\n      return AnyIcon.__manager__?.getIconElement(iconName);\n    }else{\n      return document.createElement(\"img\");\n    }\n  }\n\n  public static defineManager<ManagerNames>(manager: AnyIconsManager<ManagerNames>): void{\n    AnyIcon.__manager__ = manager as AnyIconsManager<Record<string, unknown>>;\n    if(AnyIcon.__manager_define_events__?.length){\n      AnyIcon.__manager_define_events__.forEach(event => {\n        if(typeof event == 'function'){\n          event();\n        }\n      });\n    }\n  }\n\n  public attributeChangedCallback(): void{\n    if(!this.image?.getAttribute('src')){\n      const image = this.createImage();\n      if(image){\n        this.image = image;\n      }\n      this.appendImage()\n    }\n  }\n\n  private appendStyle(): void{\n    const style = this.defineStyle();\n    if(this.shadow){\n      this.shadow.appendChild(style);\n    }\n  }\n\n  private appendImage(): void{\n    if(this.image && this.shadow){\n      const indentifiedImg = this.shadow.getElementById(this.getIconId());\n      if(indentifiedImg){\n        indentifiedImg.remove();\n      }\n      this.randomId = this.genRandomId();\n      this.image.id = this.getIconId();\n      this.shadow.appendChild(this.image);\n    }\n  }\n\n  private genRandomId(): number{\n    const randomId = Math.floor(Math.random() * 1000);\n    const windowWithId = document.getElementById(this.getIconId(randomId));\n    if(windowWithId){\n      return this.genRandomId();\n    }\n    return randomId;\n  }\n\n  private getIconId(randomId?: number): string{\n    return AnyIcon.imgIdPrefix + String(randomId ? randomId : this.randomId)\n  }\n\n  private defineStyle(): HTMLStyleElement{\n    const style = document.createElement(\"style\");\n    style.textContent = `\n      :host {\n        display: flex;\n        width: min-content;\n      }\n      :host img.any-icon-img{\n        user-select: none;\n        pointer-events: none;\n      }\n    `;\n    return style\n  }\n\n  public setIcon(name: Names): void{\n    this.setAttribute(AnyIcon.attributeName, name as string)\n  }\n\n  public setSize(size: IconSizes): void{\n    this.setAttribute(SizeNames[size], '');\n  }\n\n  public connectedCallback(): void {\n    if(this.image){\n      this.defineLoadingByProp();\n      this.defineAltByProp();\n      this.defineSizeByProp();\n    }\n  }\n\n\n  private defineImgLoading(loading: ImgLoadingType): void{\n    if(this.image){\n      this.image.loading = loading;\n    }    \n  }\n  private defineAltByProp(): void{\n    const alt = this.getAttribute(\"alt\");\n    if(alt && this.image){\n      this.image.alt = alt;\n    }\n  }\n  private defineSizeByProp(): void{\n    Object.values(SizeNames).forEach((size: string, key: IconSizes) => {\n      if(this.hasAttribute(size) && AnyIcon.__manager__ && this.image){\n        const sizeValue = AnyIcon.__manager__.getSizeValue(key);\n        if(typeof sizeValue === 'number'){\n          this.image.height = sizeValue;\n          this.image.width = sizeValue;\n        }\n      }\n    });\n  }\n  private defineLoadingByProp(): void{\n    const loadingLazy: boolean = this.hasAttribute(ImgLoadingType.LAZY);\n    const loadingEager: boolean = this.hasAttribute(ImgLoadingType.EAGER);\n    if(loadingLazy){\n      this.defineImgLoading(ImgLoadingType.LAZY);\n    }else if(loadingEager){\n      this.defineImgLoading(ImgLoadingType.EAGER);\n    }\n  }\n}","import { ImgLoadingType } from '../any-icons.type';\n\nexport default class IconModel<RN>{\n  private loadingTypeProp?: ImgLoadingType;\n  public constructor(private name: RN[keyof RN], private path: string){}\n  public getPath(): string{\n    return this.path;\n  }\n  public loadingType(type: ImgLoadingType): this{\n    this.loadingTypeProp = type;\n    return this;\n  }\n  public getLoadingType(): ImgLoadingType | undefined{\n    return this.loadingTypeProp;\n  }\n  public getName(): RN[keyof RN]{\n    return this.name;\n  }\n  public createElement(): HTMLImageElement{\n    console.log('IconModel.create')\n    const img = document.createElement('img');\n    img.src = this.path;\n    img.loading = 'lazy';\n    img.height = 12;\n    img.width = 12;\n    img.classList.add('any-icon-img')\n    img.onerror = (): void => {\n      console.error(`Falha ao carregar o Ã­cone \"${this.name}\". Verifique o caminho: ${this.path}`);\n    }\n    return img;\n  }\n}","import { IconRecord, IconSizes, SizeData } from '../any-icons.type';\nimport AnyIcon from './AnyIcon';\nimport IconModel from './IconModel';\n\nexport default class AnyIconsManager<Names>{\n  private readonly sizes: SizeData[] = [];\n  private readonly names = new Map<string, IconModel<Names>>()\n  public static build<Names>(): AnyIconsManager<Names>{\n    return new AnyIconsManager<Names>();\n  }\n  public addIcon(icon: IconModel<Names>): void{\n    this.names.set(icon.getName() as string, icon);\n  }\n  public register(\n    records: IconRecord<Names>[]\n  ): void{\n    records.forEach(({name, src}) => {\n      this.addIcon(new IconModel<Names>(name, src));\n    });\n  }\n  public getSizeValue(sizeName: IconSizes): number | string{\n    return this.sizes.find(size => size.size === sizeName)?.value || 16;\n  }\n  public getIconElement(name: keyof Names): HTMLImageElement | void{\n    const icon = this.names.get(name as string);\n    if(icon){\n      const icont = icon.createElement();\n      return icont\n    }\n  }\n  public update(): void{\n    AnyIcon.defineManager<Names>(this)\n  }\n  public registerSizes(sizes: SizeData[]): void{\n    this.sizes.push(...sizes);\n  }\n  public createElement(): AnyIcon<Names>{\n    return document.createElement(AnyIcon.elementName) as AnyIcon<Names>\n  }\n}"],"mappings":"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","names":["IconSizes"]}