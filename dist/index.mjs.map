{"version":3,"sources":["../src/any-icons.type.ts","../src/models/AnyIconRenderer.ts","../src/models/AnyIcon.ts","../src/models/IconModel.ts","../src/models/AnyIconsManager.ts","../src/index.ts"],"sourcesContent":["enum ImgLoadingType{\n  LAZY = 'lazy',\n  EAGER = 'eager'\n}\ninterface IconRecord<Names>{\n  name: Names,\n  src: string\n}\nenum IconSizes{\n  NANO,\n  MICRO,\n  TINY,\n  SMALL,\n  MEDIUM,\n  LARGE,\n  HUGE,\n  EXTRA_HUGE,\n  GIANT,\n}\nenum IconColors{\n  PRIMARY,\n  SECUNDARY,\n  TERTIARY,\n  DANGER,\n  WARNING,\n  SUCCESS,\n  BLACK\n}\ninterface SizeData{\n  size: IconSizes, value: number | string\n}\ninterface ColorsData{\n  name: IconColors,\n  color: string\n}\nconst ColorsPropName: Record<IconColors, string> = {\n  [IconColors.PRIMARY]: \"primary\",\n  [IconColors.SECUNDARY]: \"secundary\",\n  [IconColors.TERTIARY]: \"tertiary\",\n  [IconColors.DANGER]: \"danger\",\n  [IconColors.WARNING]: \"warning\",\n  [IconColors.SUCCESS]: \"success\",\n  [IconColors.BLACK]: \"black\",\n}\nconst SizeNames: Record<IconSizes, string> = {\n  [IconSizes.NANO]: \"nano\",\n  [IconSizes.MICRO]: \"micro\",\n  [IconSizes.TINY]: \"tiny\",\n  [IconSizes.SMALL]: \"small\",\n  [IconSizes.MEDIUM]: \"medium\",\n  [IconSizes.LARGE]: \"large\",\n  [IconSizes.HUGE]: \"huge\",\n  [IconSizes.EXTRA_HUGE]: \"extra-huge\",\n  [IconSizes.GIANT]: \"giant\",\n};\ninterface IHTMLElement{\n  disconnectedCallback(): void\n}\nexport { IconColors, ImgLoadingType, IconRecord, IconSizes, SizeNames, SizeData, ColorsData, ColorsPropName, IHTMLElement };","import { html, render, TemplateResult } from 'lit-html';\nimport AnyIcon from './AnyIcon';\n\nexport class AnyIconRenderer {\n  private template?: TemplateResult<1>;\n  private readonly className = 'any-icon-img';\n  public constructor(private shadow: ShadowRoot){}\n  public render(element: AnyIcon<unknown>): void {\n    const icon = element.getIcon();\n    if(icon){\n      this.template = html`\n        <style>\n          :host {\n            display: flex;\n            width: min-content;\n          }\n          :host img.${this.className}{\n            user-select: none;\n            pointer-events: none;\n            background-color: ${icon.getColor()};\n            -webkit-mask: url(${icon.getPatch()}) no-repeat center;\n            mask: url(${icon.getPatch()}) no-repeat center;\n            mark-size: cover;\n            object-fit: contain;\n          }\n        </style>\n        <img \n          class=\"${this.className}\"\n          width=\"${icon.width}\" \n          height=\"auto\" \n          loading=\"${icon.getLoadingType()}\"\n          id=\"${icon.randomId}\" \n          src=\"${icon.getPatch() || ''}\" \n          alt=\"${element.getAttribute('alt') || ''}\"\n        >\n      `;\n      this.update();\n    }\n  }\n  private update(): void {\n    render(this.template, this.shadow);\n  }\n}","import { AnyIconsManager, IconModel } from '..';\nimport { ColorsPropName, IconColors, IconSizes, IHTMLElement, ImgLoadingType, SizeNames } from '../any-icons.type';\nimport { AnyIconRenderer } from './AnyIconRenderer';\n\nexport default class AnyIcon<Names> extends HTMLElement implements IHTMLElement {\n  \n  private icon?: IconModel<Names>;\n  private static __manager__?: AnyIconsManager<Record<string, unknown>>;\n  private static __manager_define_events__: (() => void)[] = [];\n  private static readonly attributeName = 'icon-name';\n  public static readonly elementName = 'any-icon';\n  private anyIconRenderer?: AnyIconRenderer;\n  \n  public constructor() {\n    super();\n    this.anyIconRenderer = new AnyIconRenderer(this.attachShadow({ mode: \"open\" }));\n    this.render();\n    AnyIcon.__manager_define_events__?.push(this.managerDefineEventCallback);\n  }\n\n  private render(): void {\n    this.defineIcon()\n    if(this.icon){\n      this.anyIconRenderer?.render(this);\n      this.defineLoadingByProp();\n      this.defineAltByProp();\n      this.defineSizeByProp();\n      this.defineColor();\n    }\n    \n  }\n\n  public getIcon(): IconModel<Names> | undefined{\n    return this.icon\n  }\n  \n  private managerDefineEventCallback = (): void => {\n    this.render();\n  }\n\n  public connectedCallback(): void {\n    this.defineLoadingByProp();\n    this.defineAltByProp();\n    this.defineSizeByProp();\n    this.defineColor();\n  }\n\n  private defineColor(): void{\n    if(this.icon){\n      const initialColor = this.icon.getColor();\n      Object.values(ColorsPropName).forEach((propName: string, key: IconColors) => {\n        if(this.hasAttribute(propName) && AnyIcon.__manager__ && this.icon){\n          const colorData = AnyIcon.__manager__.getColor(key)\n          this.icon.color = colorData.color;\n        }\n      })\n      if(initialColor != this.icon.getColor()){\n        this.render();\n      }\n    }\n  }\n\n  public setColor(color: IconColors): void{\n    this.setAttribute(ColorsPropName[color], '');\n  }\n\n  public disconnectedCallback(): void{\n    const index = AnyIcon.__manager_define_events__?.indexOf(this.managerDefineEventCallback);\n    if (index > -1) {\n      AnyIcon.__manager_define_events__?.splice(index, 1);\n    }\n  }\n\n  public static get observedAttributes(): string[] {\n    return [this.attributeName];\n  }\n\n  private defineIcon(): void{\n    const iconName: Names | null = this.getAttribute(AnyIcon.attributeName) as Names | null;\n    if(iconName){\n      this.icon = AnyIcon.__manager__?.getIcon(iconName) as IconModel<Names>;\n    }\n  }\n\n  public static defineManager<ManagerNames>(manager: AnyIconsManager<ManagerNames>): void{\n    AnyIcon.__manager__ = manager as AnyIconsManager<Record<string, unknown>>;\n    if(AnyIcon.__manager_define_events__?.length){\n      AnyIcon.__manager_define_events__.forEach(event => {\n        if(typeof event == 'function'){\n          event();\n        }\n      });\n    }\n  }\n\n  public setIcon(name: Names): void{\n    this.setAttribute(AnyIcon.attributeName, name as string)\n  }\n\n  public setSize(size: IconSizes): void{\n    this.setAttribute(SizeNames[size], '');\n  }\n  private defineAltByProp(): boolean{\n    let changes = false\n    const alt = this.getAttribute(\"alt\");\n    if(alt && this.icon){\n      changes = true\n      this.icon.alt = alt;\n    }\n    return changes\n  }\n  private defineSizeByProp(): boolean{\n    const initialHeight = this.icon?.height;\n    const initialWidth = this.icon?.width;\n    Object.values(SizeNames).forEach((size: string, key: IconSizes) => {\n      if(this.hasAttribute(size) && AnyIcon.__manager__){\n        const sizeValue = AnyIcon.__manager__.getSizeValue(key);\n        if(typeof sizeValue === 'number' && this.icon){\n          this.icon.height = sizeValue;\n          this.icon.width = sizeValue;\n        }\n      }\n    });\n    return initialHeight != this.icon?.height || initialWidth != this.icon?.width\n  }\n  private defineLoadingByProp(): boolean{\n    let needRender = false\n    if(this.icon?.getLoadingType()){\n      const loadingLazy: boolean = this.hasAttribute(ImgLoadingType.LAZY);\n      const loadingEager: boolean = this.hasAttribute(ImgLoadingType.EAGER);\n      if(loadingLazy){\n        needRender = true\n        this.icon.loadingType(ImgLoadingType.LAZY);\n      }else if(loadingEager){\n        needRender = true\n        this.icon.loadingType(ImgLoadingType.EAGER);\n      }\n    }\n    return needRender;\n  }\n}","import { ImgLoadingType } from '../any-icons.type';\ntype elementImageId = `any-icon-img-element-${number}`;\nexport default class IconModel<IconNames>{\n  private loadingTypeProp?: ImgLoadingType;\n  public color: string = 'black';\n  public randomId?: elementImageId;\n  public width?: number;\n  public alt?: string\n  public height?: number;\n  public constructor(private name: IconNames, private path: string){}\n  public getPath(): string{\n    return this.path;\n  }\n  public loadingType(type: ImgLoadingType): this{\n    this.loadingTypeProp = type;\n    return this;\n  }\n  public getLoadingType(): ImgLoadingType | undefined{\n    return this.loadingTypeProp;\n  }\n  public getName(): IconNames{\n    return this.name;\n  }\n  public getPatch(): string{\n    return this.path;\n  }\n  public getColor(): string{\n    return this.color;\n  }\n  public createElement(): HTMLImageElement{\n    const img = document.createElement('img');\n    img.loading = 'lazy';\n    img.height = 12;\n    img.width = 12;\n    img.classList.add('any-icon-img')\n    img.onerror = (): void => {\n      console.error(`Falha ao carregar o Ã­cone \"${this.name}\". Verifique o caminho: ${this.path}`);\n    }\n    return img;\n  }\n  public defineRandomId(): void{\n    const randomIdNumber = Math.floor(Math.random() * 1000);\n    const elementIdName: elementImageId = `any-icon-img-element-${randomIdNumber}`\n    const windowWithId = document.getElementById(elementIdName);\n    if(windowWithId){\n      return this.defineRandomId();\n    }\n    this.randomId = elementIdName;\n  }\n}","import { ColorsData as ColorData, IconColors, IconRecord, IconSizes, SizeData } from '../any-icons.type';\nimport AnyIcon from './AnyIcon';\nimport IconModel from './IconModel';\n\nexport default class AnyIconsManager<Names>{\n  private readonly _sizes: SizeData[] = [];\n  private readonly _colors: ColorData[] = [];\n  private readonly names = new Map<Names, IconModel<Names>>()\n  public static build<Names>(): AnyIconsManager<Names>{\n    return new AnyIconsManager<Names>();\n  }\n  public addIcon(icon: IconModel<Names>): void{\n    this.names.set(icon.getName(), icon);\n  }\n  public icons(\n    records: IconRecord<Names>[]\n  ): void{\n    records.forEach(({name, src}) => {\n      this.addIcon(new IconModel<Names>(name, src));\n    });\n  }\n  public getSizeValue(sizeName: IconSizes): number | string{\n    return this._sizes.find(size => size.size === sizeName)?.value || 16;\n  }\n  public getIconElement(name: Names): HTMLImageElement | void{\n    const icon = this.names.get(name);\n    if(icon){\n      const icont = icon.createElement();\n      return icont\n    }\n  }\n  public getIcon(iconName: Names): IconModel<Names> | undefined{\n    return this.names.get(iconName);\n  }\n  public update(): void{\n    AnyIcon.defineManager<Names>(this)\n  }\n  public colors(colorsList: ColorData[]): void{\n    this._colors.push(...colorsList);\n  }\n  public getColor(color: IconColors): ColorData{\n    return this._colors.find(c => c.name === color) || {color: 'black', name: IconColors.BLACK};\n  }\n  public sizes(sizes: SizeData[]): void{\n    this._sizes.push(...sizes);\n  }\n  public createElement(): AnyIcon<Names>{\n    return document.createElement(AnyIcon.elementName) as AnyIcon<Names>\n  }\n}","import { IconSizes, IconColors } from './any-icons.type';\nimport AnyIcon from './models/AnyIcon';\nimport AnyIconsManager from './models/AnyIconsManager';\nimport IconModel from './models/IconModel';\n\nconst createManager = <Names>(): AnyIconsManager<Names> => {\n  const instance = AnyIconsManager.build<Names>();\n  AnyIcon.defineManager<Names>(instance)\n  return instance\n}\n\ncustomElements.define(AnyIcon.elementName, AnyIcon);\nexport {AnyIconsManager, AnyIcon, createManager, IconModel, IconSizes, IconColors}\n\n"],"mappings":"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","names":["IconSizes","IconColors"]}